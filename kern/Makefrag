#
# Makefile fragment for JOS kernel.
# This is NOT a complete makefile;
# you must run GNU make in the top-level directory
# where the GNUmakefile is located.
#

OBJDIRS += kern

KERN_LDFLAGS := $(LDFLAGS) -T kern/kernel.ld -nostdlib

# entry.S must be first, so that it's the first code in the text segment!!!
#
# We also snatch the use of a couple handy source files
# from the lib directory, to avoid gratuitous code duplication.
KERN_SRCFILES :=	kern/entry.S \
			kern/init.c \
			kern/console.c \
			kern/monitor.c \
			kern/pmap.c \
			kern/env.c \
			kern/kclock.c \
			kern/picirq.c \
			kern/printf.c \
			kern/trap.c \
			kern/trapentry.S \
			kern/sched.c \
			kern/syscall.c \
			kern/kdebug.c \
			lib/printfmt.c \
			lib/readline.c \
			lib/string.c

# Only build files if they exist.
KERN_SRCFILES := $(wildcard $(KERN_SRCFILES))

# Binary program images to embed within the kernel.
KERN_BINFILES :=	user/idle \
			user/forktree \
			user/pingpong \
			user/primes \
			user/testfsipc \
			user/writemotd \
			user/icode \
			user/spawnhello \
			user/hello \
			user/spawninit \
			user/init \
			user/testpteshare \
			user/testfdsharing \
			user/testpipe \
			user/testpiperace2 \
			user/primespipe \
			user/initsh \
			user/testshell \
			user/spin \
			fs/fs

KERN_SRCFILES +=	kern/programs.c

KERN_OBJFILES := $(patsubst %.c, $(OBJDIR)/%.o, $(KERN_SRCFILES))
KERN_OBJFILES := $(patsubst %.S, $(OBJDIR)/%.o, $(KERN_OBJFILES))
KERN_OBJFILES := $(patsubst %.cc, $(OBJDIR)/%.o, $(KERN_OBJFILES))
KERN_OBJFILES := $(patsubst obj/lib/%, obj/kern/%, $(KERN_OBJFILES))

KERN_BINFILES := $(patsubst %, $(OBJDIR)/%, $(KERN_BINFILES))

# How to build kernel object files
$(OBJDIR)/kern/%.o: kern/%.c
	@echo + cc $<
	@mkdir -p $(@D)
	$(V)$(CC) -nostdinc $(KERN_CFLAGS) -c -o $@ $<

$(OBJDIR)/kern/%.o: kern/%.cc
	@echo + c++ $<
	@mkdir -p $(@D)
	$(V)$(CXX) -nostdinc $(KERN_CXXFLAGS) -c -o $@ $<

$(OBJDIR)/kern/%.o: kern/%.S
	@echo + as $<
	@mkdir -p $(@D)
	$(V)$(CC) -nostdinc $(KERN_CFLAGS) -c -o $@ $<

$(OBJDIR)/kern/%.o: lib/%.c
	@echo + cc $<
	@mkdir -p $(@D)
	$(V)$(CC) -nostdinc $(KERN_CFLAGS) -c -o $@ $<

# How to build the kernel itself
$(OBJDIR)/kernel: $(KERN_OBJFILES) $(KERN_BINFILES) kern/kernel.ld
	@echo + ld $@
	$(V)$(LD) -o $@ $(KERN_LDFLAGS) $(KERN_OBJFILES) $(GCC_LIB) -b binary $(KERN_BINFILES)
	$(V)$(OBJDUMP) -S $@ > $@.asm
	$(V)$(NM) -n $@ | awk '{ print $$1, $$3 }' > $@.sym

# How to build the Bochs disk image
$(OBJDIR)/mkbootdisk: boot/mkbootdisk.c
	@echo + mk mkbootdisk
	$(V)$(NCC) -o $@ $<

$(OBJDIR)/kernel.img: $(OBJDIR)/mkbootdisk $(OBJDIR)/kernel $(OBJDIR)/boot/boot
	@echo + mk $@
	$(V)$(OBJDIR)/mkbootdisk $(OBJDIR)/boot/boot $(OBJDIR)/kernel @10000 >$(OBJDIR)/kernel.img

all: $(OBJDIR)/kernel.img

grub: $(OBJDIR)/jos-grub

install-grub: $(OBJDIR)/jos-grub $(OBJDIR)/fs.img
	sudo cp $(OBJDIR)/jos-grub /boot/jos
	test $$USER = kohler && sudo cp $(OBJDIR)/fs.img /dev/hda2

$(OBJDIR)/jos-grub: $(OBJDIR)/kernel
	@echo + oc $@
	$(V)$(OBJCOPY) --adjust-vma=0x10000000 $^ $@

# How to build the kernbin structures
kern/programs.c: kern/Makefrag
	@echo + mk $@
	$(V)echo '#include <kern/programs.h>' >$@
	$(V)echo $(KERN_BINFILES) | tr ' ' '\012' | grep . | sed 's/obj\/\([^\/]*\)\/\(.*\)/extern const uint8_t _binary_obj_\1_\2_start[], _binary_obj_\1_\2_size[];/' >>$@
	$(V)echo 'struct Program programs[] = {' >>$@
	$(V)echo $(KERN_BINFILES) | tr ' ' '\012' | grep . | sort | sed 's/obj\/\([^\/]*\)\/\(.*\)/{ "\2", _binary_obj_\1_\2_start, (int)_binary_obj_\1_\2_size },/' >>$@
	$(V)echo "{ 0, 0, 0 } };" >>$@
	$(V)echo 'int nprograms = sizeof(programs) / sizeof(programs[0]) - 1;' >>$@
